// Descriptors for Mission evaluation.

import "odlc.proto";

package auvsi_suas.proto;

// Multi-user mission evaluation.
message MultiUserMissionEvaluation {
    repeated MissionEvaluation teams = 1;
}

// Evaluation data for a mission.
message MissionEvaluation {
    // The team which this evaluation describes.
    optional string team = 1;

    // Warnings generated during the evaluation process.
    repeated string warnings = 2;

    // Feedback provided to the team.
    optional MissionFeedback feedback = 3;

    // Scoring data.
    optional MissionScore score = 4;
}

// Data which was basis for score, provided as feedback for the team.
message MissionFeedback {
    // Time spent on mission clock (seconds) measured by interop.
    optional double mission_clock_time_sec = 1;
    // Time spent in air measured by interop.
    optional double flight_time_sec = 2;

    // Max time between telemetry uploads (seconds).
    optional double uas_telemetry_time_max_sec = 3;
    // Avg time between telemetry uploads (seconds).
    optional double uas_telemetry_time_avg_sec = 4;

    // Time spent out of bounds (seconds).
    optional double out_of_bounds_time_sec = 5;
    // Number of boundary violations.
    optional int32 boundary_violations = 6;

    // Waypoint evaluation data.
    repeated WaypointEvaluation waypoints = 7;

    // Obstacle evaluation data.
    repeated ObstacleEvaluation stationary_obstacles = 8;
    repeated ObstacleEvaluation moving_obstacles = 9;

    // Object detection evaluation data.
    optional MultiOdlcEvaluation odlc = 10;

    // Feedback from judges.
    optional MissionJudgeFeedback judge = 11;
}

// Data provided manually by the judges.
message MissionJudgeFeedback {
    // Time spent on the flight clock.
    optional double flight_time_sec = 1;
    // Time spent on the post-processing clock.
    optional double post_process_time_sec = 2;
    // Whether a timeout was used.
    optional bool used_timeout = 3;

    // Time spent in manual flight.
    optional bool min_auto_flight_time = 4;
    // Number of safety pilot manual takeovers.
    optional int32 safety_pilot_takeovers = 5;
    // Number of waypoints captured.
    optional int32 waypoints_captured = 6;
    // Number of times gone out of bounds.
    optional int32 out_of_bounds = 7;
    // Number of times gone out of bounds where it compromised safety.
    optional int32 unsafe_out_of_bounds = 8;
    // Whether things fell off UAS.
    optional bool things_fell_off_uas = 9;
    // Whether the UAS crashed.
    optional bool crashed = 10;

    // Air delivery accuracy.
    optional double air_delivery_accuracy_ft = 11;

    // Operational excellence score.
    optional double operational_excellence_percent = 12;
}

// Evaluation data for waypoints.
message WaypointEvaluation {
    // ID of the waypoint.
    optional int64 id = 1;
    // Ratio of points for the waypoint [0, 1].
    optional double score_ratio = 2;
    // Closest distance for scored approach (feet).
    optional double closest_for_scored_approach_ft = 3;
    // Closest distance during mission (feet).
    optional double closest_for_mission_ft = 4;
}

// Evaluation data for obstacles.
message ObstacleEvaluation {
    // ID of the obstacle.
    optional int64 id = 1;
    // Whether it was hit.
    optional bool hit = 2;
}

// Scoring data for entire mission. All scores are ratios [0, 1].
message MissionScore {
    // Total score for the mission.
    optional double score_ratio = 1;

    // The subcomponent scores.
    optional TimelineScore timeline = 2;
    optional AutonomousFlightScore autonomous_flight = 3;
    optional ObstacleAvoidanceScore obstacle_avoidance = 4;
    optional ObjectScore object = 5;
    optional AirDeliveryScore air_delivery = 6;
    optional OperationalExcellenceScore operational_excellence = 7;
}

// Scoring data for timeline.
message TimelineScore {
    optional double score_ratio = 1;
    optional double mission_time = 2;
    optional double mission_penalty = 3;
    optional double timeout = 4;
}

// Scoring data for autonomous flight.
message AutonomousFlightScore {
    optional double score_ratio = 1;
    optional bool telemetry_prerequisite = 2;
    optional double flight = 3;
    optional double waypoint_capture = 4;
    optional double waypoint_accuracy = 5;
    optional double out_of_bounds_penalty = 6;
    optional double things_fell_off_penalty = 7;
    optional double crashed_penalty = 8;
}

// Scoring data for obstacle avoidance.
message ObstacleAvoidanceScore {
    optional double score_ratio = 1;
    optional bool telemetry_prerequisite = 2;
    optional double stationary_obstacle = 3;
    optional double moving_obstacle = 4;
}

// Scoring data for objects.
message ObjectScore {
    optional double score_ratio = 1;
    optional double characteristics = 2;
    optional double geolocation = 3;
    optional double actionable = 4;
    optional double autonomy = 5;
    optional double interoperability = 6;
    optional double extra_object_penalty = 7;
}

// Scoring data for air delivery.
message AirDeliveryScore {
    optional double score_ratio = 1;
    optional double delivery_accuracy = 2;
}

// Scoring data for operational excellence.
message OperationalExcellenceScore {
    optional double score_ratio = 1;
}
