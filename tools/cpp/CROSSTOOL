major_version: "local"
minor_version: ""
default_target_cpu: "same_as_host"

default_toolchain {
  cpu: "raspi"
  toolchain_identifier: "raspi_linux"
}

default_toolchain {
  cpu: "k8"
  toolchain_identifier: "local"
}

default_toolchain {
  cpu: "darwin"
  toolchain_identifier: "local"
}

toolchain {
  abi_version: "local"
  abi_libc_version: "local"
  builtin_sysroot: ""
  compiler: "clang"
  host_system_name: "local"
  needsPic: true
  supports_gold_linker: false
  supports_incremental_linker: false
  supports_fission: false
  supports_interface_shared_objects: false
  supports_normalizing_ar: false
  supports_start_end_lib: false
  supports_thin_archives: false
  target_libc: "local"
  target_cpu: "k8"
  target_system_name: "k8"
  toolchain_identifier: "local"

  tool_path { name: "ar" path: "/usr/bin/ar" }
  tool_path { name: "compat-ld" path: "/usr/bin/ld" }
  tool_path { name: "cpp" path: "/usr/bin/cpp" }
  tool_path { name: "dwp" path: "/usr/bin/dwp" }
  tool_path { name: "gcc" path: "/usr/bin/clang-6.0" }
  tool_path { name: "gcov" path: "/usr/bin/gcov" }
  tool_path { name: "ld" path: "/usr/bin/ld" }
  tool_path { name: "nm" path: "/usr/bin/nm" }
  tool_path { name: "objcopy" path: "/usr/bin/objcopy" }
  objcopy_embed_flag: "-I"
  objcopy_embed_flag: "binary"
  tool_path { name: "objdump" path: "/usr/bin/objdump" }
  tool_path { name: "strip" path: "/usr/bin/strip" }

  # absolute locations and has no remote execution, yet. However, this will need
  # to be fixed, maybe with auto-detection?
  # cxx_builtin_include_directory: '/usr/include/c++/8'
  # cxx_builtin_include_directory: '/usr/include/c++/8/backward'
  # cxx_builtin_include_directory: '/usr/include/x86_64-linux-gnu/c++/8'
  # cxx_builtin_include_directory: '/usr/include/x86_64-linux-gnu'
  cxx_builtin_include_directory: '/usr/include/python2.7'
  cxx_builtin_include_directory: '/usr/lib/llvm-6.0/lib/clang/6.0.1/include'
  cxx_builtin_include_directory: '/usr/include'
  cxx_builtin_include_directory: '/usr/lib/clang/6.0/include'
  cxx_builtin_include_directory: '/usr/lib/clang/6.0.1/include'

  # cxx_flag: "-isystem"
  # cxx_flag: "/usr/include/libcxxabi"

  unfiltered_cxx_flag: "-Wno-null-arithmetic"
  unfiltered_cxx_flag: "-Wno-null-pointer-arithmetic"
  unfiltered_cxx_flag: "-Wno-non-virtual-dtor"
  unfiltered_cxx_flag: "-Wno-delete-non-virtual-dtor"

  linker_flag: "-lstdc++"
  # linker_flag: "-lc++"
  # linker_flag: "-lprofiler"
  linker_flag: "-B/usr/bin/"

  # get ZeroMQ to compile:
  linker_flag: "-lunwind"
  linker_flag: "-ldl"

  feature {
    name: "opt"
    implies: "all_modes"
    flag_set {
      action: "preprocess-assemble"
      action: "c-compile"
      action: "c++-compile"
      action: "c++-header-parsing"
      action: "c++-header-preprocessing"
      action: "c++-module-compile"
    }
  }

  feature {
    name: "dbg"
    implies: "all_modes"
    flag_set {
      action: "preprocess-assemble"
      action: "c-compile"
      action: "c++-compile"
      action: "c++-header-parsing"
      action: "c++-header-preprocessing"
      action: "c++-module-compile"
      flag_group {
        flag: "-fno-omit-frame-pointer"
      }
    }
  }

  feature {
    name: "fastbuild"
    implies: "all_modes"
    flag_set {
      action: "preprocess-assemble"
      action: "c-compile"
      action: "c++-compile"
      action: "c++-header-parsing"
      action: "c++-header-preprocessing"
      action: "c++-module-compile"
    }
  }

  feature {
    name: "all_modes"
    flag_set {
      action: "preprocess-assemble"
      action: "assemble"
      action: "c-compile"
      flag_group {
        flag: "-std=gnu99"
      }
    }
    flag_set {
      action: "c++-compile"
      action: "c++-header-parsing"
      action: "c++-header-preprocessing"
      action: "c++-module-compile"
      flag_group {
        flag: "-std=gnu++1y"
      }
    }
    flag_set {
      action: "preprocess-assemble"
      action: "assemble"
      action: "c++-link"
      action: "c++-compile"
      action: "c++-header-parsing"
      action: "c++-header-preprocessing"
      action: "c++-module-compile"
      action: "c-compile"
      flag_group {
        # We always want to compile with -pthread semantics.
        flag: "-pthread"
      }
    }
  }

  # Anticipated future default.
  # This makes GCC and Clang do what we want when called through symlinks.
  unfiltered_cxx_flag: "-no-canonical-prefixes"
  linker_flag: "-no-canonical-prefixes"

  # Things that the code wants defined.
  compiler_flag: "-D__STDC_FORMAT_MACROS"
  compiler_flag: "-D__STDC_CONSTANT_MACROS"
  compiler_flag: "-D__STDC_LIMIT_MACROS"
  compiler_flag: "-D_FILE_OFFSET_BITS=64"

  linker_flag: "-fuse-ld=gold"
  # linker_flag: "-lpthread"

  # Make C++ compilation deterministic. Use linkstamping instead of these
  # compiler symbols.
  unfiltered_cxx_flag: "-Wno-builtin-macro-redefined"
  unfiltered_cxx_flag: "-D__DATE__=\"redacted\""
  unfiltered_cxx_flag: "-D__TIMESTAMP__=\"redacted\""
  unfiltered_cxx_flag: "-D__TIME__=\"redacted\""

  # Security hardening on by default.
  # Conservative choice; -D_FORTIFY_SOURCE=2 may be unsafe in some cases.
  # We need to undef it before redefining it as some distributions now have
  # it enabled by default.
  compiler_flag: "-U_FORTIFY_SOURCE"
  compiler_flag: "-D_FORTIFY_SOURCE=1"
  compiler_flag: "-fstack-protector"
  linker_flag: "-Wl,-z,relro,-z,now"

  # Pretty much everything needs this, including parts of the glibc STL...
  linker_flag: "-lm"

  # Enable coloring even if there's no attached terminal. Bazel removes the
  # escape sequences if --nocolor is specified.
  compiler_flag: "-fcolor-diagnostics"
  compiler_flag: "-fmessage-length=80"
  compiler_flag: "-fmacro-backtrace-limit=0"

  compiler_flag: "-Wall"
  compiler_flag: "-Wextra"
  compiler_flag: "-Wpointer-arith"
  compiler_flag: "-Wstrict-aliasing"
  compiler_flag: "-Wwrite-strings"
  compiler_flag: "-Wtype-limits"
  compiler_flag: "-Wsign-compare"
  compiler_flag: "-Wformat=2"
  compiler_flag: "-Werror"
  compiler_flag: "-Wno-sometimes-uninitialized"

  # Keep stack frames for debugging, even in opt mode.
  compiler_flag: "-fno-omit-frame-pointer"

  # Don't use temp files while compiling.
  compiler_flag: "-pipe"

  # Stamp the binary with a unique identifier.
  linker_flag: "-Wl,--build-id=md5"
  linker_flag: "-Wl,--hash-style=gnu"
  linker_flag: "-Wl,--warn-execstack"
  linker_flag: "-Wl,--detect-odr-violations"

  # Enable debug symbols.
  compiler_flag: "-ggdb3"

  compilation_mode_flags {
    mode: OPT

    # Disable assertions
    compiler_flag: "-DNDEBUG"

    # Removal of unused code and data at link time (can this increase binary size in some cases?).
    compiler_flag: "-ffunction-sections"
    compiler_flag: "-fdata-sections"
    linker_flag: "-Wl,--gc-sections"
  }
}

toolchain {
  abi_version: "raspi"
  abi_libc_version: "raspi"
  builtin_sysroot: ""
  compiler: "gcc"
  host_system_name: "raspi"
  needsPic: true
  supports_gold_linker: false
  supports_incremental_linker: false
  supports_fission: false
  supports_interface_shared_objects: false
  supports_normalizing_ar: false
  supports_start_end_lib: false
  supports_thin_archives: true
  target_libc: "raspi"
  target_cpu: "raspi"
  target_system_name: "raspi"
  toolchain_identifier: "raspi"

  tool_path { name: "ar" path: "raspi_toolchain/arm-linux-gnueabihf-ar" }
  tool_path { name: "compat-ld" path: "raspi_toolchain/arm-linux-gnueabihf-ld" }
  tool_path { name: "cpp" path: "raspi_toolchain/arm-linux-gnueabihf-cpp" }
  tool_path { name: "dwp" path: "raspi_toolchain/arm-linux-gnueabihf-dwp" }
  tool_path { name: "gcc" path: "raspi_toolchain/arm-linux-gnueabihf-gcc" }
  tool_path { name: "gcov" path: "raspi_toolchain/arm-linux-gnueabihf-gcov" }
  # C(++) compiles invoke the compiler (as that is the one knowing where
  # to find libraries), but we provide LD so other rules can invoke the linker.
  tool_path { name: "ld" path: "raspi_toolchain/arm-linux-gnueabihf-ld" }
  tool_path { name: "nm" path: "raspi_toolchain/arm-linux-gnueabihf-nm" }
  tool_path { name: "objcopy" path: "raspi_toolchain/arm-linux-gnueabihf-objcopy" }
  objcopy_embed_flag: "-I"
  objcopy_embed_flag: "binary"
  tool_path { name: "objdump" path: "raspi_toolchain/arm-linux-gnueabihf-objdump" }
  tool_path { name: "strip" path: "raspi_toolchain/arm-linux-gnueabihf-strip" }

  compiler_flag: "-DRASPI_DEPLOYMENT"
  # compiler_flag: "-DENABLE_PRECOMPILED_HEADERS=OFF"

  compiler_flag: "--sysroot=external/raspi_toolchain/arm-linux-gnueabihf"
  compiler_flag: "-mfloat-abi=hard"

  compiler_flag: "-nostdinc"
  compiler_flag: "-isystem"
  compiler_flag: "external/raspi_toolchain/lib/gcc/arm-linux-gnueabihf/6.3.0/include"
  compiler_flag: "-isystem"
  compiler_flag: "external/raspi_toolchain/lib/gcc/arm-linux-gnueabihf/6.3.0/include-fixed"
  compiler_flag: "-isystem"
  compiler_flag: "external/raspi_toolchain/arm-linux-gnueabihf/include"

  cxx_flag: "-isystem"
  cxx_flag: "external/raspi_toolchain/arm-linux-gnueabihf/include/c++/6.3.0/arm-linux-gnueabihf"
  cxx_flag: "-isystem"
  cxx_flag: "external/raspi_toolchain/arm-linux-gnueabihf/include/c++/6.3.0"

  cxx_builtin_include_directory: "%package(@raspi_toolchain//lib/gcc/arm-linux-gnueabihf/6.3.0/include)%"
  cxx_builtin_include_directory: "%package(@raspi_toolchain//lib/gcc/arm-linux-gnueabihf/6.3.0/include-fixed)%"
  cxx_builtin_include_directory: "%package(@raspi_toolchain//arm-linux-gnueabihf/include)%"
  cxx_builtin_include_directory: "%package(@raspi_toolchain//arm-linux-gnueabihf/include)%/c++/6.3.0"

  # Link to all of the shared libraries.
  linker_flag: "--sysroot=external/raspi_toolchain"
  linker_flag: "-Lexternal/raspi_toolchain/lib"
  linker_flag: "-Lexternal/raspi_toolchain/arm-linux-gnueabihf/lib"
  linker_flag: "-Wl,-rpath-link,external/raspi_toolchain/arm-linux-gnueabihf/lib"
  linker_flag: "-Bexternal/raspi_toolchain/bin"
  linker_flag: "-lstdc++"

  feature {
    name: "opt"
    implies: "all_modes"
    flag_set {
      action: "preprocess-assemble"
      action: "c-compile"
      action: "c++-compile"
      action: "c++-header-parsing"
      action: "c++-header-preprocessing"
      action: "c++-module-compile"
    }
  }

  feature {
    name: "dbg"
    implies: "all_modes"
    flag_set {
      action: "preprocess-assemble"
      action: "c-compile"
      action: "c++-compile"
      action: "c++-header-parsing"
      action: "c++-header-preprocessing"
      action: "c++-module-compile"
      flag_group {
        flag: "-fno-omit-frame-pointer"
      }
    }
  }

  feature {
    name: "fastbuild"
    implies: "all_modes"
    flag_set {
      action: "preprocess-assemble"
      action: "c-compile"
      action: "c++-compile"
      action: "c++-header-parsing"
      action: "c++-header-preprocessing"
      action: "c++-module-compile"
    }
  }

  feature {
    name: "all_modes"
    flag_set {
      action: "preprocess-assemble"
      action: "assemble"
      action: "c-compile"
      flag_group {
        flag: "-std=gnu99"
      }
    }
    flag_set {
      action: "c++-compile"
      action: "c++-header-parsing"
      action: "c++-header-preprocessing"
      action: "c++-module-compile"
      flag_group {
        flag: "-std=c++11"
        # flag: "-std=gnu++1y"
      }
    }
    flag_set {
      action: "preprocess-assemble"
      action: "assemble"
      action: "c++-link"
      action: "c++-compile"
      action: "c++-header-parsing"
      action: "c++-header-preprocessing"
      action: "c++-module-compile"
      action: "c-compile"
      flag_group {
        # We always want to compile with -pthread semantics.
        flag: "-pthread"
      }
    }
  }

  # Anticipated future default.
  # This makes GCC and Clang do what we want when called through symlinks.
  linker_flag: "-no-canonical-prefixes"

  # Things that the code wants defined.
  compiler_flag: "-D__STDC_FORMAT_MACROS"
  compiler_flag: "-D__STDC_CONSTANT_MACROS"
  compiler_flag: "-D__STDC_LIMIT_MACROS"
  compiler_flag: "-D_FILE_OFFSET_BITS=64"

  # Make C++ compilation deterministic. Use linkstamping instead of these
  # compiler symbols.
  unfiltered_cxx_flag: "-Wno-builtin-macro-redefined"
  unfiltered_cxx_flag: "-D__DATE__=\"redacted\""
  unfiltered_cxx_flag: "-D__TIMESTAMP__=\"redacted\""
  unfiltered_cxx_flag: "-D__TIME__=\"redacted\""

  # Security hardening on by default.
  # Conservative choice; -D_FORTIFY_SOURCE=2 may be unsafe in some cases.
  # We need to undef it before redefining it as some distributions now have
  # it enabled by default.
  compiler_flag: "-U_FORTIFY_SOURCE"
  compiler_flag: "-fstack-protector"
  linker_flag: "-Wl,-z,relro,-z,now"

  # Pretty much everything needs this, including parts of the glibc STL...
  linker_flag: "-lm"
  # linker_flag: "-lrt"

  compiler_flag: "-Wall"
  compiler_flag: "-Wextra"
  compiler_flag: "-Wpointer-arith"
  compiler_flag: "-Wstrict-aliasing"
  compiler_flag: "-Wwrite-strings"
  compiler_flag: "-Wtype-limits"
  compiler_flag: "-Wsign-compare"
  compiler_flag: "-Wformat=2"
  compiler_flag: "-Werror"
  compiler_flag: "-Wunused-local-typedefs"
  compiler_flag: "-Wno-unused-parameter"

  # Keep stack frames for debugging, even in opt mode.
  compiler_flag: "-fno-omit-frame-pointer"

  # Don't use temp files while compiling.
  compiler_flag: "-pipe"

  # Stamp the binary with a unique identifier.
  linker_flag: "-Wl,--build-id=md5"
  linker_flag: "-Wl,--hash-style=gnu"

  # Enable debug symbols.
  compiler_flag: "-ggdb3"

  compilation_mode_flags {
    mode: OPT

    # Disable assertions
    compiler_flag: "-DNDEBUG"
    compiler_flag: "-D_FORTIFY_SOURCE=1"

    # Removal of unused code and data at link time (can this increase binary size in some cases?).
    compiler_flag: "-ffunction-sections"
    compiler_flag: "-fdata-sections"
    linker_flag: "-Wl,--gc-sections"
  }
}
