syntax = "proto2";

package src.controls;

message Sensors {
  optional double time                                                     = 1;
  optional double latitude                                                 = 2;  // degrees (http://docs.ros.org/api/sensor_msgs/html/msg/NavSatFix.html)
  optional double longitude                                                = 3;  // degrees (link above)
  optional float altitude                                                  = 4;  // meters above MSL (mean sea level) (http://docs.ros.org/api/mavros_msgs/html/msg/Altitude.html)
  optional float relative_altitude                                         = 5;  // meters above home position (link above)
  optional float heading                                                   = 6;  // degrees clockwise from north (http://wiki.ros.org/mavros#mavros.2BAC8-Plugins.global_position)
  optional float velocity_x                                                = 7;  // m/s (https://mavlink.io/en/messages/common.html#LOCAL_POSITION_NED)
  optional float velocity_y                                                = 8;  // m/s (link above)
  optional float velocity_z                                                = 9;  // m/s (link above)
  optional float gps_ground_speed                                          = 10; // m/s (http://docs.ros.org/api/mavros_msgs/html/msg/VFR_HUD.html)
  optional int32 gps_satellite_count                                       = 11; // (https://mavlink.io/en/messages/common.html#GPS_RAW_INT, https://github.com/mavlink/mavros/blob/a7ef4fc0ec153307cbce3c98a998956c6296b954/mavros/src/plugins/global_position.cpp#L427)
  optional float gps_eph                                                   = 12; // meters (horizontal position uncertainty) (see ros_to_proto.cc for explanation)
  optional float gps_epv                                                   = 13; // meters (vertical position uncertainty) (see ros_to_proto.cc for explanation)
  optional float accelerometer_x                                           = 14; // m/s^2 (http://docs.ros.org/api/sensor_msgs/html/msg/Imu.html)
  optional float accelerometer_y                                           = 15; // m/s^2 (link above)
  optional float accelerometer_z                                           = 16; // m/s^2 (link above)
  optional float gyro_x                                                    = 17; // rad/sec (link above)
  optional float gyro_y                                                    = 18; // rad/sec (link above)
  optional float gyro_z                                                    = 19; // rad/sec (link above)
  optional float roll                                                      = 20; // radians (see ros_to_proto.cc)
  optional float pitch                                                     = 21; // radians (see ros_to_proto.cc)
  optional float yaw                                                       = 22; // radians counterclockwise from east (see ros_to_proto.cc)
  optional float battery_voltage                                           = 26; // Volts (http://docs.ros.org/api/sensor_msgs/html/msg/BatteryState.html)
  optional float battery_current                                           = 27; // A (negative when discharging) (link above)
  optional bool armed                                                      = 28; // (http://docs.ros.org/api/mavros_msgs/html/msg/State.html)
  optional string autopilot_state                                          = 29; // (link above)
  optional double last_gps                                                 = 30;
}

message Goal {
  required bool run_mission                                                = 1;

  required bool trigger_failsafe                                           = 2;
  required bool trigger_throttle_cut                                       = 3;

  required double trigger_takeoff                                          = 4;
  required double trigger_hold                                             = 5;
  required double trigger_offboard                                         = 6;
  required double trigger_rtl                                              = 7;
  required double trigger_land                                             = 8;
  required double trigger_arm                                              = 9;
  required double trigger_disarm                                           = 10;

  required double trigger_alarm                                            = 11;
  required double trigger_bomb_drop                                        = 12;
  required double trigger_dslr                                             = 13;
}

message Output {
  required int32 state                                                     = 1;
  required double flight_time                                              = 2;
  required int32 current_command_index                                     = 3;

  required bool send_offboard                                              = 4;
  required float velocity_x                                                = 5;
  required float velocity_y                                                = 6;
  required float velocity_z                                                = 7;
  required float yaw_setpoint                                              = 8;

  required float gimbal_angle                                              = 9;
  required bool bomb_drop                                                  = 10;
  required bool alarm                                                      = 11;
  required bool dslr                                                       = 12;

  required bool trigger_takeoff                                            = 13;
  required bool trigger_hold                                               = 14;
  required bool trigger_offboard                                           = 15;
  required bool trigger_rtl                                                = 16;
  required bool trigger_land                                               = 17;
  required bool trigger_arm                                                = 18;
  required bool trigger_disarm                                             = 19;
}

message UgvSensors {
  required double time                                                     = 1;
  required double latitude                                                 = 2;
  required double longitude                                                = 3;
  required double altitude                                                 = 4;
}

message UasMessage {
  optional double time                                                     = 1;

  oneof payload {
    Sensors sensors                                                        = 2;
    Goal goal                                                              = 3;
    Output output                                                          = 4;
  }
}

message AlarmSequence {
  repeated float on_off_cycles                                             = 1;
}
